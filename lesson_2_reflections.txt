What happens when you initialize a repository? Why do you need to do it?

when you intialize a repository it tells git to start tracking changes ot the files
in that directory. it adds a few .git files into the directory and you can now check
the status of these files and start making commits. we dont know how to do that yet
but to start a repository type: git init
to get the status of a repo type: git status

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows you to commit one file at a time from the current reposity.
This will ensure that you have one logical change per commit. This will help with debugging

How can you use the staging area to make sure you have one commit per logical change?
We have just learned 3 new commands
git checkout master :brings you back to the current state of the files
git diff : compares the difference between the current directory and the staging area
git diff --staged : compares the differences between the staging area and the last commit
these commands combined will allow you to visualize what changes have been made.
make sure that these are the changes you want. and then commit them. with git commit
git reset --hard restores the file to its original state if you do not want to save the changes:
CAREFUL: this is non-reversible

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Anytime you have a working version of a program and wnat to test out experimental changes keeping original functionality
for example: you have a game that you want to make an easy version,
you have a website you want to translate into italian
you want to add a new feature to the program

How do the diagrams help you visualize the branch structure?
Diagrams let you see how branches are related. which branches have common parents, and know how to navigate through commits

